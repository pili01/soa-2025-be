services:
  # Gateway service - main entry point
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: soa-gateway
    ports:
      - "8080:8080"  # Main gateway port
    environment:
      - GATEWAY_PORT=8080
      - BLOG_SERVICE_URL=http://blog-service:3000
      - IMAGE_SERVICE_URL=http://image-service:3000
      - STAKEHOLDERS_SERVICE_URL=http://stakeholders-service:8080
      - TOURS_SERVICE_URL=http://tours-service:8080
      - JWT_SECRET=U1aZEDdXc8r+07B7Ez9eBl8Yec3H1oD06rGecIuhV4k=
    depends_on:
      - blog-service
      - image-service
      - stakeholders-service
      - tours-service
    networks: [soa-network]
    restart: unless-stopped

  stakeholders-db:
    image: postgres:17.5
    container_name: stakeholders-db
    env_file:
      - ./stakeholders-service/db/.env
    expose:
    - "8080"
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - stakeholders-db-data:/var/lib/postgresql/data
      - ./stakeholders-service/db:/docker-entrypoint-initdb.d
    networks: [soa-network]
  
  stakeholders-service:
    build:
      context: ./stakeholders-service
      dockerfile: .Dockerfile
    container_name: stakeholders-service
    ports:
      - "8081:8080"  # Changed port to avoid conflict with gateway
    depends_on:
      stakeholders-db:
        condition: service_healthy
    env_file:
      - ./stakeholders-service/.env
    networks: [soa-network]

  blog-db:
    image: postgres:14-alpine
    container_name: postgres_blog_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: blogSOA
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - blog-db-data:/var/lib/postgresql/data
    networks: [soa-network]

  blog-service:
    build:
      context: ./blog-service
      dockerfile: .Dockerfile
    container_name: blog_service_app
    restart: always
    ports:
      - "3000:3000"  # Keep internal port for gateway access
    depends_on:
      blog-db:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://postgres:super@blog-db:5432/blogSOA?schema=public"
    command: ["node", "src/app.js"]
    networks: [soa-network]

  tours-db:
    image: mongo:8.0
    container_name: tours-db
    env_file:
      - ./tours-service/db/.env
    ports:
      - "5435:27017"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")'"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - tours-db-data:/data/db
      - ./tours-service/db/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks: [soa-network]
      
  tours-service:
    build:
      context: ./tours-service
      dockerfile: .Dockerfile
    container_name: tours-service
    ports:
      - "8082:8080"  
    depends_on:
      tours-db:
        condition: service_healthy
    env_file:
      - ./tours-service/.env
    networks: [soa-network]
  
  image-service:
    build:
      context: ./image-service
      dockerfile: .Dockerfile   
    container_name: image-service
    ports:
      - "3001:3000" 
    env_file:
      - ./image-service/.env
    volumes:
      - ./image-service/uploads:/usr/src/app/uploads
    restart: unless-stopped
    networks: [soa-network]

  map-service:
    build:
      context: ./map-service
      dockerfile: .Dockerfile
    container_name: map-service
    ports:
      - "3002:3000"  
    env_file:
      - ./map-service/.env
    restart: unless-stopped
    networks: [soa-network]

networks:
  soa-network:
    driver: bridge

volumes:
  stakeholders-db-data:
  blog-db-data:
  tours-db-data: