// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: tours.proto

package compiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TourService_CreateTour_FullMethodName         = "/tours.TourService/CreateTour"
	TourService_GetToursByAuthorID_FullMethodName = "/tours.TourService/GetToursByAuthorID"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error)
	GetToursByAuthorID(ctx context.Context, in *GetToursByAuthorIDRequest, opts ...grpc.CallOption) (*GetToursByAuthorIDResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetToursByAuthorID(ctx context.Context, in *GetToursByAuthorIDRequest, opts ...grpc.CallOption) (*GetToursByAuthorIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToursByAuthorIDResponse)
	err := c.cc.Invoke(ctx, TourService_GetToursByAuthorID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility.
type TourServiceServer interface {
	CreateTour(context.Context, *CreateTourRequest) (*TourResponse, error)
	GetToursByAuthorID(context.Context, *GetToursByAuthorIDRequest) (*GetToursByAuthorIDResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTourServiceServer struct{}

func (UnimplementedTourServiceServer) CreateTour(context.Context, *CreateTourRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) GetToursByAuthorID(context.Context, *GetToursByAuthorIDRequest) (*GetToursByAuthorIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthorID not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}
func (UnimplementedTourServiceServer) testEmbeddedByValue()                     {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	// If the following call pancis, it indicates UnimplementedTourServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetToursByAuthorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursByAuthorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetToursByAuthorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetToursByAuthorID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetToursByAuthorID(ctx, req.(*GetToursByAuthorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tours.TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "GetToursByAuthorID",
			Handler:    _TourService_GetToursByAuthorID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours.proto",
}
